<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Embed HTML tags in Hexo markdown]]></title>
      <url>http://darrencheng0817.github.io/2016/03/23/embed-HTML-tags-in-Hexo-markdown/</url>
      <content type="html"><![CDATA[<hr>
<p>Hexo use markdown for posts and pages. It is very convenient to write something and the markdown paser will transform it to html pages. But markdown do not support every html tag, sometimes you want to embed a html tag in you post. All tutorial I found on google tell me that just add the tags, the markdown paser is clever enough to recognize them. However, the really thing is the paser will add some addtional <code>&lt;br&gt;</code> tags, which could be annoying.<br><a id="more"></a></p>
<p>One solution is that you could modify the paser to work as you wish. But I find a simpl way to achieve the goal.</p>
<p>It turns out that Hexo has a <a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="external">tag plugin</a>.</p>
<blockquote>
<p>Tag plugins are different from post tags. They are ported from Octopress and provide a useful way for you to quickly add specific content to your posts.</p>
</blockquote>
<p>So you could use one of the supported tag called Raw, like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
<p>The content inside the raw tag will not be parsed. Problem solved.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Enable Ajax CORS(Cross-Origin Resource Sharing)]]></title>
      <url>http://darrencheng0817.github.io/2016/03/17/enable-ajax-cors/</url>
      <content type="html"><![CDATA[<hr>
<p>Several days ago, I tried to use Ajax to get some data from my REST API running on a different server.  Following error shown up:</p>
<blockquote>
<p>XMLHttpRequest cannot load <strong><strong>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘</strong></strong>‘ is therefore not allowed access.</p>
</blockquote>
<p>I’m pretty sure my API worded well, because my moble app was able to get the data. It turned out that in the web application security model there is a <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">same-origin policy</a>. Under the policy, a web browser permits scripts contained in a first web page to access data in a second web page, but only if both web pages have the same origin.</p>
<p>There are many way to do <a href="https://www.w3.org/TR/cors/" target="_blank" rel="external">Cross-Origin Resource Sharing</a>. You could yous Jsonp, but it only allow GET request, POST would be changed into GET. Besides that, <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">HTTP access control</a> is the best apporach I beieve.<br><a id="more"></a></p>
<p>The solution is pretty simpl. You just need to set several attributes in reponse header.</p>
<p>Here is the code in node.js modifying the http reponse header.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);<span class="comment">//You could also specify domain you want to give access</span></span><br><span class="line">res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'X-Requested-With,Content-Type,Authorization'</span>);</span><br><span class="line">res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'GET,PUT,PATCH,POST,DELETE'</span>);</span><br></pre></td></tr></table></figure></p>
<p>It would be better to use a middleware to handle this.</p>
<p>Restify has a plugin to do that.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.use(restify.CORS(</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     origins: ['https://foo.com', 'http://bar.com', 'http://baz.com:8081'],   // defaults to ['*']</span></span><br><span class="line"><span class="comment">//     credentials: true,                 // defaults to false</span></span><br><span class="line"><span class="comment">//     headers: ['x-foo']                 // sets expose-headers</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure>
<p>Now the error resolved!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Announcement]]></title>
      <url>http://darrencheng0817.github.io/2016/03/16/announcement/</url>
      <content type="html"><![CDATA[<hr>
<p>Dear visitor:</p>
<p>Welcome to Darren’s blog! </p>
<p>I just update the jQuery version of my blog to the lastest version, (v2.2.1). If you find any error when loding the page, please leave a message under this page. Thanks!</p>
<p>Darren</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Basic usage of jQuery]]></title>
      <url>http://darrencheng0817.github.io/2016/03/16/basic-usage-of-jquery/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p>jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript.</p>
</blockquote>
<p>This post will discuss some basic usage of jQuery. It should be useful for beginners and myself to consult.</p>
<p>Go <a href="http://api.jquery.com/" target="_blank" rel="external">here</a> for the full API document.</p>
<p>All jQuery functions start with a $, usually referred to as a dollar sign operator, or simply as bling.<br><a id="more"></a></p>
<h2 id="Document-ready-function"><a href="#Document-ready-function" class="headerlink" title="Document ready function"></a><a href="http://api.jquery.com/ready/" target="_blank" rel="external">Document ready function</a></h2><p>.ready()function is a function to execute after the DOM is ready.</p>
<p>This is important because without your document ready function, your code may run before your HTML is rendered, which would cause bugs.</p>
<h2 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a><a href="http://api.jquery.com/category/selectors/" target="_blank" rel="external">Selector</a></h2><p>jQuery often selects an HTML element with a selector, then does something to that element.</p>
<p>Following are most common usage. <a href="http://www.w3schools.com/jquery/jquery_ref_selectors.asp" target="_blank" rel="external">Full list</a>.</p>
<table>
<thead>
<tr>
<th>Selector</th>
<th style="text-align:center">Example</th>
<th style="text-align:right">Selects</th>
</tr>
</thead>
<tbody>
<tr>
<td>＊</td>
<td style="text-align:center">$(“*”)</td>
<td style="text-align:right">All elements</td>
</tr>
<tr>
<td>#id</td>
<td style="text-align:center">$(“#lastname”)</td>
<td style="text-align:right">The element with id=”lastname”</td>
</tr>
<tr>
<td>.class</td>
<td style="text-align:center">$(“.intro”)</td>
<td style="text-align:right">All elements with the class “intro” or “demo”</td>
</tr>
<tr>
<td>element</td>
<td style="text-align:center">$(“p”)</td>
<td style="text-align:right">All &lt; p &gt; elements</td>
</tr>
</tbody>
</table>
<h2 id="Manipulation"><a href="#Manipulation" class="headerlink" title="Manipulation"></a><a href="http://api.jquery.com/category/manipulation/" target="_blank" rel="external">Manipulation</a></h2><h3 id="Class-Attribute"><a href="#Class-Attribute" class="headerlink" title="Class Attribute"></a><a href="http://api.jquery.com/category/attributes/" target="_blank" rel="external">Class Attribute</a></h3><p>These methods inspect and manipulate the CSS classes assigned to elements.</p>
<table>
<thead>
<tr>
<th>Method</th>
<th style="text-align:center">Explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>.addClass()</td>
<td style="text-align:center">Adds the specified class(es) to each element in the set of matched elements.</td>
</tr>
<tr>
<td>.hasClass()</td>
<td style="text-align:center">Determine whether any of the matched elements are assigned the given class.</td>
</tr>
<tr>
<td>.removeClass()</td>
<td style="text-align:center">Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</td>
</tr>
<tr>
<td>.toggleClass()</td>
<td style="text-align:center">Add or remove one or more classes from each element in the set of matched elements, depending on either the class’s presence or the value of the state argument.</td>
</tr>
<tr>
<td>.attr()</td>
<td style="text-align:center">Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element.</td>
</tr>
<tr>
<td>.prop()</td>
<td style="text-align:center">Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.</td>
</tr>
</tbody>
</table>
<h3 id="Copying"><a href="#Copying" class="headerlink" title="Copying"></a>Copying</h3><p>.clone() method allows us to create a deep copy of the set of matched elements.</p>
<h3 id="DOM-Insertion"><a href="#DOM-Insertion" class="headerlink" title="DOM Insertion"></a>DOM Insertion</h3><p>These methods allow us to insert new content inside an existing element.</p>
<table>
<thead>
<tr>
<th>Method</th>
<th style="text-align:center">Explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>.append()</td>
<td style="text-align:center">Insert content, specified by the parameter, to the end of each element in the set of matched elements.</td>
</tr>
<tr>
<td>.appendTo()</td>
<td style="text-align:center">Insert every element in the set of matched elements to the end of the target.</td>
</tr>
<tr>
<td>.prepend()</td>
<td style="text-align:center">Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</td>
</tr>
<tr>
<td>.prependTo()</td>
<td style="text-align:center">Insert every element in the set of matched elements to the beginning of the target.</td>
</tr>
</tbody>
</table>
<p>These methods allow us to insert new content outside an existing element.</p>
<table>
<thead>
<tr>
<th>Method</th>
<th style="text-align:center">Explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>.after()</td>
<td style="text-align:center">Insert content, specified by the parameter, after each element in the set of matched elements.</td>
</tr>
<tr>
<td>.before()</td>
<td style="text-align:center">Insert content, specified by the parameter, before each element in the set of matched elements.</td>
</tr>
<tr>
<td>.insertAfter()</td>
<td style="text-align:center">Insert every element in the set of matched elements after the target.</td>
</tr>
<tr>
<td>.insertBefore()</td>
<td style="text-align:center">Insert every element in the set of matched elements before the target.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Detect cycle in directed graph]]></title>
      <url>http://darrencheng0817.github.io/2016/03/12/Detect-cycle-in-directed-graph/</url>
      <content type="html"><![CDATA[<hr>
<p>Detecting cycle in undirected graph has been discussed in the <a href="http://blog.darrenlife.com/2016/03/11/Detect-cycle-in-undirected-graph/" target="_blank" rel="external">previous post</a>. Now let’s see what happened if it is a directed graph.<br><a id="more"></a>  </p>
<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>The original BFS and DFS are not working here. Consider the following graph:<br><img src="/images/2016_3_12/1.png" alt="Example graph" width="100" hight="200"><br>There is not cycle in the graph, however, if you do a BFS or DFS, you will get wrong answer. Let’s say you do DFS start from A, then A-&gt;B-&gt;C. Then you go to C from A, found that C is already visited. The algorithm will return ture but there is no cycle.</p>
<h1 id="Modified-DFS"><a href="#Modified-DFS" class="headerlink" title="Modified DFS"></a>Modified DFS</h1><p>DFS can be used to detect cycle in a Graph instead of BFS. Because DFS for a connected graph produces a tree. There is a cycle in a graph only if there is a back edge present in the graph. A back edge is an edge that is from a node to itself (selfloop) or one of its ancestor in the tree produced by DFS. </p>
<p>To detect a back edge, we can keep track of vertices currently in recursion stack of function for DFS traversal. If we reach a vertex that is already in the recursion stack, then there is a cycle in the tree. The edge that connects current vertex to the vertex in the recursion stack is back edge. We use an array to keep track of vertices in the recursion stack. </p>
<h2 id="Python-code"><a href="#Python-code" class="headerlink" title="Python code:"></a>Python code:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle_dectector_dfs</span><span class="params">(edges)</span>:</span></span><br><span class="line">    graph,in_degree=build_graph(edges)</span><br><span class="line">    visited=set()</span><br><span class="line">    rec_stack=set()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(point)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> point <span class="keyword">in</span> visited:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        visited.add(point)</span><br><span class="line">        rec_stack.add(point)</span><br><span class="line">        <span class="keyword">for</span> to_point <span class="keyword">in</span> graph[point]:</span><br><span class="line">            <span class="keyword">if</span> to_point <span class="keyword">not</span> <span class="keyword">in</span> visited <span class="keyword">and</span> <span class="keyword">not</span> dfs(to_point):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">elif</span> to_point <span class="keyword">in</span> rec_stack:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        rec_stack.remove(point)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>   </span><br><span class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> graph.keys():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dfs(point):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>      </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_graph</span><span class="params">(edges)</span>:</span></span><br><span class="line">    graph=&#123;&#125;</span><br><span class="line">    in_degree=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> from_point,to_point <span class="keyword">in</span> edges:</span><br><span class="line">        <span class="keyword">if</span> from_point <span class="keyword">not</span> <span class="keyword">in</span> graph:</span><br><span class="line">            graph[from_point]=[]</span><br><span class="line">        <span class="keyword">if</span> to_point <span class="keyword">not</span> <span class="keyword">in</span> graph:</span><br><span class="line">            graph[to_point]=[]</span><br><span class="line">        graph[from_point].append(to_point)</span><br><span class="line">        <span class="keyword">if</span> from_point <span class="keyword">not</span> <span class="keyword">in</span> in_degree:</span><br><span class="line">            in_degree[from_point]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> to_point <span class="keyword">not</span> <span class="keyword">in</span> in_degree:</span><br><span class="line">            in_degree[to_point]=<span class="number">0</span></span><br><span class="line">        in_degree[to_point]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> graph,in_degree</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">edges=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">1</span>]]</span><br><span class="line">print(circle_dectector_dfs(edges))</span><br></pre></td></tr></table></figure>
<p>The algorithm runs in O(V+E) time.</p>
<h1 id="Topological-Sort"><a href="#Topological-Sort" class="headerlink" title="Topological Sort"></a>Topological Sort</h1><p>Topological Sort is a other way to detect cycle in directed graph.</p>
<blockquote>
<p>In the field of computer science, a topological sort (sometimes abbreviated toposort[1]) or topological ordering of a directed graph is a linear ordering of its vertices such that for every directed edge uv from vertex u to vertex v, u comes before v in the ordering.</p>
</blockquote>
<p>If a Topological Sort exist for a directed graph, then the graph contains no cycle. Otherwise the cycle exist.</p>
<blockquote>
<p>One algorithm, first described by Kahn (1962), works by choosing vertices in the same order as the eventual topological sort. First, find a list of “start nodes” which have no incoming edges and insert them into a set S; at least one such node must exist in a non-empty acyclic graph. Then:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">L ← Empty list that will contain the sorted elements</span><br><span class="line">S ← Set of all nodes with no incoming edges</span><br><span class="line">while S is non-empty do</span><br><span class="line">    remove a node n from S</span><br><span class="line">    add n to tail of L</span><br><span class="line">    for each node m with an edge e from n to m do</span><br><span class="line">        remove edge e from the graph</span><br><span class="line">        if m has no other incoming edges then</span><br><span class="line">            insert m into S</span><br><span class="line">if graph has edges then</span><br><span class="line">    return error (graph has at least one cycle)</span><br><span class="line">else </span><br><span class="line">    return L (a topologically sorted order)</span><br></pre></td></tr></table></figure>
<h2 id="Python-code-1"><a href="#Python-code-1" class="headerlink" title="Python code"></a>Python code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle_dectector</span><span class="params">(edges)</span>:</span></span><br><span class="line">    graph,in_degree=build_graph(edges)</span><br><span class="line">    queue=[start_point <span class="keyword">for</span> start_point <span class="keyword">in</span> in_degree.keys() <span class="keyword">if</span> in_degree[start_point]==<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        from_point=queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> to_point <span class="keyword">in</span> graph[from_point]:</span><br><span class="line">            in_degree[to_point]-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> in_degree[to_point]==<span class="number">0</span>:</span><br><span class="line">                queue.append(to_point)</span><br><span class="line">        graph.pop(from_point)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> bool(graph)</span><br></pre></td></tr></table></figure>
<p>This also runs in O(V+E) liner time.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Detect cycle in undirected graph]]></title>
      <url>http://darrencheng0817.github.io/2016/03/11/Detect-cycle-in-undirected-graph/</url>
      <content type="html"><![CDATA[<hr>
<p>In this post, I will discuss how to detect cycle in undirected graph using BFS, DFS and Union-Find.<br><a id="more"></a>  </p>
<h1 id="BFS-or-DFS"><a href="#BFS-or-DFS" class="headerlink" title="BFS or DFS"></a>BFS or DFS</h1><p>It is very easy to detect cycle in a undirected graph, simple BFS or DFS should work. Use a set to cache the nodes that have been visited. Then during the traversal, if current visiting node is alreadly in the set, there must be a cycle in the graph.</p>
<h2 id="Python-code"><a href="#Python-code" class="headerlink" title="Python code:"></a>Python code:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle_dectector</span><span class="params">(edges,start_point)</span>:</span></span><br><span class="line">    graph=build_graph(edges)</span><br><span class="line">    queue=[start_point]</span><br><span class="line">    visited=set()</span><br><span class="line">    visited.add(queue[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        from_point=queue.pop(<span class="number">0</span>)<span class="comment">#BFS</span></span><br><span class="line">        <span class="comment"># from_point=queue.pop(0) #DFS</span></span><br><span class="line">        <span class="keyword">for</span> to_point <span class="keyword">in</span> graph[from_point]:</span><br><span class="line">            <span class="keyword">if</span> to_point <span class="keyword">in</span> visited:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                queue.append(to_point)</span><br><span class="line">                visited.add(to_point)</span><br><span class="line">            graph[to_point].remove(from_point)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_graph</span><span class="params">(edges)</span>:</span></span><br><span class="line">    graph=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> from_point,to_point <span class="keyword">in</span> edges:</span><br><span class="line">        <span class="keyword">if</span> from_point <span class="keyword">not</span> <span class="keyword">in</span> graph:</span><br><span class="line">            graph[from_point]=set()</span><br><span class="line">        <span class="keyword">if</span> to_point <span class="keyword">not</span> <span class="keyword">in</span> graph:</span><br><span class="line">            graph[to_point]=set()</span><br><span class="line">        graph[from_point].add(to_point)</span><br><span class="line">        graph[to_point].add(from_point)</span><br><span class="line">    <span class="keyword">return</span> graph</span><br><span class="line">        </span><br><span class="line">edges=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">4</span>,<span class="number">1</span>]]</span><br><span class="line">print(circle_dectector(edges),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>I use adjcent list to store the graph. The time complexity is O(V+E) time.</p>
<p>The above code works for connected graph. For a disconnected graph, you could call the function for every point as the start point. Or you could put one point in each component in the queue initially.</p>
<h1 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union-Find"></a>Union-Find</h1><p>The content will come soon.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[First post]]></title>
      <url>http://darrencheng0817.github.io/2016/03/11/First-post/</url>
      <content type="html"><![CDATA[<hr>
<p>Welcome to Darren’s blog! </p>
<p>This static website is built by <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>, which is a node.js framework. The website is hosted both on github pages and coding.net(For chinese visitors). So for visitors in China, please go to the <a href="http://darrencheng.coding.me/" target="_blank" rel="external">mirror site</a> which is faster.</p>
<p>I will write some technique posts or some moments about my life.</p>
<p>Fight on!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Snake]]></title>
      <url>http://darrencheng0817.github.io/2016/03/11/snake/</url>
      <content type="html"><![CDATA[<p>just a test</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2>

<script type="text/javascript">
// code by CNwander.
// common 
function getElement(str) {
    return document.getElementById(str);
}
function $tag(str,target) {
    target = target || document;
    return target.getElementsByTagName(str);
}
// global
// const
var WIDTH = 20, //网格宽度
    HEIGHT = 20, //网格高度
    SAY = ["相当不错，虽然说和CNwander还不是一个级别的","可以啊，再加点油都可以和CNwander媲美了！","一个字，牛，连CNwander都甘拜下风了","差不多行了，别把游戏玩爆了"];
var len = 3, //蛇的长度
    speed, //爬行速度
    gridElems = multiArray(WIDTH,HEIGHT), //单元格对象
    carrier, //承载对象(食物，障碍，滑板，刹车)
    snake, //蛇每节的坐标点
    info, //交互对话
    btnStart, //开始按钮
    topScore = len,
    snakeTimer, //蛇行走计时器
    brakeTimers = [], //随机刹车
    skateTimers = [], //随机滑板
    directkey; // 方向键值 37-40 左上右下
window.onload = function(){
info = getElement("say");
btnStart = getElement("btnStart");
initGrid(); //网格初始化
document.onkeydown = attachEvents; //绑定方向事件
btnStart.onclick = function (e) {
    btnStart.blur(); //firefox中必须释放焦点
    start(); //游戏开始
    btnStart.setAttribute("disabled",true);
    btnStart.style.color = "#aaa";
}
}
//开始游戏
function start() {
    len = 3;
    speed = 10;
    directkey = 39;
    carrier = multiArray(WIDTH,HEIGHT);
    snake = new Array();
    clear();
    initSnake(); //蛇初始化
    addObject("food");
    walk();
    addRandomBrake();
}
//创建网格
function initGrid() {
    var body = $tag("body")[0];
    var table = document.createElement("table"),
    tbody = document.createElement("tbody")
    for(var j = 0; j < HEIGHT; j++) {  
        var col = document.createElement("tr");  
        for(var i = 0; i < WIDTH; i++) {  
            var row = document.createElement("td");
            gridElems[i][j] = col.appendChild(row);  
        }
        tbody.appendChild(col);  
    }
    table.appendChild(tbody);
    getElement("snakeWrap").appendChild(table);
}
//创建蛇
function initSnake() {
    var pointer = randomPointer(len-1, len-1, WIDTH/2);
    for(var i = 0; i < len; i++) {
        var x = pointer[0] - i,
        y = pointer[1];
        snake.push([x,y]);
        carrier[x][y] = "cover";
    }
}
//添加键盘事件
function attachEvents(e) {
    e = e || event;
    directkey = Math.abs(e.keyCode - directkey) != 2 && e.keyCode > 36 && e.keyCode < 41 ? e.keyCode : directkey; //非方向键、反向无效
    return false;
}
function walk() {
    if(snakeTimer) window.clearInterval(snakeTimer);
    snakeTimer = window.setInterval(step, Math.floor(3000/speed));
}
function step() {
    //获取目标点
    var headX = snake[0][0],
    headY = snake[0][1];
    switch(directkey) {
        case 37: headX -= 1; break;
        case 38: headY -= 1; break;
        case 39: headX += 1; break;
        case 40: headY += 1; break;
    }
    //碰到边界，阻挡物，则结束游戏
    if(headX >= WIDTH || headX < 0 || headY >= HEIGHT || headY < 0 || carrier[headX][headY] == "block" || carrier[headX][headY] == "cover" ) {
        trace("GAME OVER");
        if(getText(getElement("score"))*1 < len) trace(len,getElement("score"));
        btnStart.removeAttribute("disabled");
        btnStart.style.color = "#000";
        window.clearInterval(snakeTimer);
        for(var i = 0; i < brakeTimers.length; i++) window.clearTimeout(brakeTimers[i]);
        for(var i = 0; i < skateTimers.length; i++) window.clearTimeout(skateTimers[i]);
        return;
        }
    //加速
    if(len % 4 === 0 && speed < 60 && carrier[headX][headY] == "food") {
        speed += 5;
        walk(); 
        trace("加速！");
    }
    //捡到刹车
    if(carrier[headX][headY] == "brake") {
        speed = 5;
        walk();
        trace("恭喜！捡到刹车一个。");
    }
    //遭遇滑板
    if(carrier[headX][headY] == "skate") {
        speed += 20;
        walk();
        trace("遭遇滑板！");
    }   
    //添加阻挡物
    if(len % 6 === 0 && len < 60 && carrier[headX][headY] == "food") {
        addObject("block");
    }   
    //对话
    if(len <= 40 && len % 10 === 0) {
        var cheer = SAY[len/10-1];
        trace(cheer);
    }   
    //吃东西
    if(carrier[headX][headY] != "food") {
        var lastX = snake[snake.length-1][0],
        lastY = snake[snake.length-1][1];
        carrier[lastX][lastY] = false;
        gridElems[lastX][lastY].className = "";
        snake.pop();
    } else {
        carrier[headX][headY] = false;
        trace("吃到食物");
        addObject("food");
    }
    snake.unshift([headX,headY]);
    carrier[headX][headY] = "cover";
    gridElems[headX][headY].className = "cover";
    
    len = snake.length;
}
//添加物品
function addObject(name) {
    var p = randomPointer();
    carrier[p[0]][p[1]] = name;
    gridElems[p[0]][p[1]].className = name;
}
//添加随机数量刹车和滑板
function addRandomBrake() {
    var num = randowNum(1,5);
    for(var i = 0; i < num; i++) {
        brakeTimers.push( window.setTimeout(function(){addObject("brake")},randowNum(10000,100000)) );
        skateTimers.push( window.setTimeout(function(){addObject("skate")},randowNum(5000,100000)) );
    }        
}
//输出信息
function trace(sth,who) {
    who = who || info;
    if(document.all) who.innerText = sth;
    else who.textContent = sth;
}
//获取信息
function getText(target) {
    if(document.all) return target.innerText;
    else return target.textContent;
}
//创建二维数组
function multiArray(m,n) {
    var arr =  new Array(n);
    for(var i=0; i<m; i++) 
        arr[i] = new Array(m);
    return arr;
}
//清除画面
function clear() {
    for(var y = 0; y < gridElems.length; y++) {
        for(var x = 0; x < gridElems[y].length; x++) {
            gridElems[x][y].className = "";
        }
    }
}
//产生指定范围随机点
function randomPointer(startX,startY,endX,endY) {
    startX = startX || 0;
    startY = startY || 0;
    endX = endX || WIDTH;
    endY = endY || HEIGHT;
    var p = [],
    x = Math.floor(Math.random()*(endX - startX)) + startX,
    y = Math.floor(Math.random()*(endY - startY)) + startY;
    if(carrier[x][y]) return randomPointer(startX,startY,endX,endY);
    p[0] = x;
    p[1] = y;
    return p;
}
//产生随机整数
function randowNum(start,end) {
    return Math.floor(Math.random()*(end - start)) + start;
}
</script>
<style type="text/css">
        * {margin:0; padding:0}
        body {background:#333; -moz-user-select:none; text-align:center; font-size:12px}
        table {margin:80px auto 10px auto; overflow:hidden; border-collapse:collapse; }
        td {width:20px; height:20px; border:1px solid #eee; background:#f4f4f4}
        .cover {background:#39c;}
        .food {background:#093}
        .block {background:#333}
        .brake {background:#f00}
        .skate {background:#00f}
        #say {margin-top:50px; color:white}
        #help {width:420px; margin:0 auto; line-height:17px; color:white}
        #help span {float:left; margin-right:10px}
        #help .box {width:15px; height:15px; margin-right:5px; border:1px solid white}
        #btnStart {clear:both; width:100px; height:30px; margin-top:10px; padding:0; background:#bbb; color:#222; border:1px solid #fff; border-bottom-color:#000; border-right-color:#000; cursor:pointer}
</style>
    
<div id="say">Snake</div>
    <div id="snakeWrap"></div>
    <div id="help">
        <span class="box food"></span><span>Food</span>
        <span class="box block"></span><span> Bad</span>
        <span class="box skate"></span><span>Speed Up</span>
        <span class="box brake"></span><span>Speed Down</span>
        <span style="float:right">Score<strong id="score">0</strong></span>
        <input type="button" id="btnStart" value="Start">
    </div>



]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[404]]></title>
      <url>http://darrencheng0817.github.io//404.html</url>
      <content type="html"><![CDATA[<hr>
<p><style type="text/css"><br>    .article-header {<br>        padding: 0;<br>        padding-top: 26px;<br>        border-left: none;<br>        text-align: center;<br>    }<br>    .article-header:hover {<br>        border-left: none;<br>    }<br>    .article-title {<br>        font-size: 2.1em;<br>    }<br>    strong a {<br>        color: #747474;<br>    }<br>    .article-meta {<br>        display: none;<br>    }<br>    .share {<br>        display: none;<br>    }<br>    .ds-meta {<br>        display: none;<br>    }<br>    .player {<br>        margin-left: -10px;<br>    }<br>    .sign {<br>        text-align: right;<br>        font-style: italic;<br>    }</p>
<pre><code>  #page-visit {
    display: none;
}
.center {
    text-align: center;
    height: 2.5em;
    font-weight: bold;
}
.article-entry hr {
    margin: 0;
}
.pic {
    text-align: center;
    margin: 0;
}
.pic br {
      display: none;
  }
#container .article-info-post.article-info {
  display: none;
  }
#container .article .article-title {
padding: 0;
}
.share{
    display: none;
}
</code></pre><p></style></p>
<p><div style="text-align:center"><br><img src="/images/404.png" alt="404" width="400" hight="200"><br></div></p>
<h2 id="Search-what-you-want"><a href="#Search-what-you-want" class="headerlink" title="Search what you want"></a>Search what you want</h2><p><div style="text-align: center"><br>    <input type="text" id="local-search-input" name="q" results="0" placeholder="Search articles here!" class="search-input"><br></div></p>
<p><div id="local-search-result"></div></p>
<script src="/js/search.js"></script> 
<script type="text/javascript">      
 var path = "/search.xml";
 searchFunc(path, 'local-search-input', 'local-search-result');
</script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Search]]></title>
      <url>http://darrencheng0817.github.io/Search/index.html</url>
      <content type="html"><![CDATA[<h2 id="Search-what-you-want"><a href="#Search-what-you-want" class="headerlink" title="Search what you want"></a>Search what you want</h2><p><div style="text-align: center"><br>    <input type="text" id="local-search-input" name="q" results="0" placeholder="Search articles here!" class="search-input"><br></div></p>
<p><div id="local-search-result"></div></p>
<script src="/js/search.js"></script> 
<script type="text/javascript">      
 var path = "/search.xml";
 searchFunc(path, 'local-search-input', 'local-search-result');
</script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[About]]></title>
      <url>http://darrencheng0817.github.io/about/index.html</url>
      <content type="html"><![CDATA[<hr>
<p>The site was built on Mar.11, 2016 using <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>, which is a node.js framework. Beacuse previous blog, built by wordpress, was too slow and hard to maintain. </p>
<p>The website is hosted both on github pages and coding.net (For chinese visitors). So for visitors in China, please go to the <a href="http://darrencheng.coding.me/" target="_blank" rel="external">mirror site</a> which is faster.</p>
<a id="more"></a>
<h1 id="History"><a href="#History" class="headerlink" title="History"></a>History</h1><h2 id="3-14-2016-Custom-404"><a href="#3-14-2016-Custom-404" class="headerlink" title="[3/14/2016] Custom 404"></a>[3/14/2016] Custom 404</h2><ol>
<li>Added custom 404 page.</li>
<li>Store images on <a href="https://www.flickr.com/" target="_blank" rel="external">flickr</a>, use plugin <a href="https://github.com/visioncan/hexo-tag-flickr" target="_blank" rel="external">hexo-tag-flickr</a> to access images.</li>
<li>Start to use https.</li>
<li>Change social sharing code which quotes unsafe js scripts. Now the sharing js code use https connection. </li>
</ol>
<h2 id="3-13-2016-Top-amp-Search"><a href="#3-13-2016-Top-amp-Search" class="headerlink" title="[3/13/2016] Top &amp; Search"></a>[3/13/2016] Top &amp; Search</h2><ol>
<li>Added top function, modified generator.js to sort posts first by top value, then date. Advised by <a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" target="_blank" rel="external">Netcan</a>.</li>
<li>Added Search function.</li>
</ol>
<h2 id="3-12-2016-Custom-domain"><a href="#3-12-2016-Custom-domain" class="headerlink" title="[3/12/2016] Custom domain"></a>[3/12/2016] Custom domain</h2><ol>
<li>Modified DNS, created A record, pointing subdomain blog.darrenlife.com to github pages.</li>
<li>My nameserver(NS) could not differentiate traffice from China or overseas, so the mirror site for Chinese visitors will use address of <a href="http://darrencheng.coding.me" target="_blank" rel="external">darrencheng.coding.me</a></li>
<li>Added js script on my <a href="http://darrenlife.com" target="_blank" rel="external">front page</a> to identify visitors’ location, redirect them to China mirror site if they come from China.</li>
</ol>
<h2 id="3-11-2016-Theme-amp-Host"><a href="#3-11-2016-Theme-amp-Host" class="headerlink" title="[3/11/2016] Theme &amp; Host"></a>[3/11/2016] Theme &amp; Host</h2><ol>
<li>Hexo theme <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">Yelee</a> was used.</li>
<li>The website was hosted both on github pages and coding.net</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Me]]></title>
      <url>http://darrencheng0817.github.io/me/index.html</url>
      <content type="html"><![CDATA[<hr>
<p>Current master student in University of California. Full-stack developer.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://darrencheng0817.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
